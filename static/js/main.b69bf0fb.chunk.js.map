{"version":3,"sources":["components/train.svg","components/Times.js","components/Header.js","App.js","components/Footer.js","serviceWorker.js","index.js"],"names":["module","exports","Times","state","trains","arrivals","axios","get","this","props","startPoint","crs","endPoint","then","res","console","log","data","trainServices","setState","catch","err","className","map","item","delay","key","serviceID","style","animationDelay","etd","std","Fragment","subsequentCallingPointsList","subsequentCallingPoints","filter","et","st","location","platform","sta","length","operator","origin","locationName","Component","Header","src","train","alt","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b69bf0fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/train.585577ad.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Times extends Component {\n  state = {\n    trains: [],\n    arrivals: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        `https://api.departureboard.io/api/v2.0/getDeparturesByCRS/${this.props.startPoint.crs}/?apiKey=68eaf87e-6cc1-49ca-9e95-f8f1da42ac99&filterStation=${this.props.endPoint.crs}&numServices=5`\n      )\n      .then(res => {\n        console.log(res.data.trainServices);\n        this.setState({ trains: res.data.trainServices });\n      })\n      .catch(err => console.log(err));\n\n    axios\n      .get(\n        `https://api.departureboard.io/api/v2.0/getArrivalsByCRS/${this.props.endPoint.crs}/?apiKey=68eaf87e-6cc1-49ca-9e95-f8f1da42ac99&timeOffset=42&filterStation=${this.props.startPoint.crs}&numServices=5`\n      )\n      .then(res => {\n        console.log(res.data.trainServices);\n        this.setState({ arrivals: res.data.trainServices });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { trains, arrivals } = this.state;\n    const { startPoint, endPoint } = this.props;\n    return (\n      <div className=\"timesContainer\">\n        <ul className=\"trainTimes\">\n          {trains.map((item, delay) => (\n            <li\n              key={item.serviceID}\n              className=\"animated fadeInUp\"\n              style={{ animationDelay: `${1.45 + delay * 0.15}s` }}\n            >\n              <div className=\"cardTop\">\n                <div className=\"times\">\n                  <div className=\"departure\">\n                    {item.etd !== \"On time\" ? (\n                      <span className=\"delayed\">\n                        <p>{item.etd}</p>\n                        <s>{item.std}</s>\n                      </span>\n                    ) : (\n                      <React.Fragment>\n                        <p>{item.std}</p>\n                        <s className=\"fade\">{item.std}</s>\n                      </React.Fragment>\n                    )}\n                  </div>\n                  <div className=\"dots\"></div>\n\n                  {item.subsequentCallingPointsList[0].subsequentCallingPoints\n                    .filter(key => key.crs === endPoint.crs)\n                    .map(key => (\n                      <div className=\"arrival\" key={item.serviceID}>\n                        {key.et !== \"On time\" ? (\n                          <span className=\"delayed\">\n                            <p>{key.et}</p>\n                            <s>{key.st}</s>\n                          </span>\n                        ) : (\n                          <React.Fragment>\n                            <p>{key.st}</p>\n                            <s className=\"fade\">{key.st}</s>\n                          </React.Fragment>\n                        )}\n                      </div>\n                    ))}\n                </div>\n                <div className=\"location\">\n                  <div className=\"start\">\n                    <p>\n                      {startPoint.location} <br />\n                      <span>\n                        {item.platform\n                          ? `Platform ${item.platform}`\n                          : `Waiting for platform`}\n                      </span>\n                    </p>\n                  </div>\n                  <div className=\"time\"></div>\n                  <div className=\"end\">\n                    <p>\n                      {endPoint.location} <br />\n                      {arrivals\n                        .filter(\n                          key =>\n                            key.sta ===\n                            item.subsequentCallingPointsList[0]\n                              .subsequentCallingPoints[\n                              item.subsequentCallingPointsList[0]\n                                .subsequentCallingPoints.length - 1\n                            ].st\n                        )\n                        .map(key => (\n                          <span key={item.serviceID}>\n                            {key.platform\n                              ? `Platform ${key.platform}`\n                              : `Waiting for platform`}\n                          </span>\n                        ))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"cardBottom\">\n                <p>\n                  <span className=\"operator\">{item.operator} </span> service{\" \"}\n                  <br />\n                  from{\" \"}\n                  <span className=\"location\">\n                    {item.origin[0].locationName}\n                  </span>{\" \"}\n                  to{\" \"}\n                  <span className=\"location\">\n                    {\n                      item.subsequentCallingPointsList[0]\n                        .subsequentCallingPoints[\n                        item.subsequentCallingPointsList[0]\n                          .subsequentCallingPoints.length - 1\n                      ].locationName\n                    }\n                  </span>{\" \"}\n                </p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Times;\n","import React from \"react\";\nimport train from \"./train.svg\";\nimport \"./Header.css\";\n\nfunction Header(props) {\n  const { startPoint, endPoint } = props;\n  return (\n    <header>\n      <div className=\"headerLocation\">\n        <p className=\"animated fadeIn\">{startPoint.location}</p>\n        <p className=\"animated fadeIn\">{endPoint.location}</p>\n      </div>\n      <div className=\"headerCrs\">\n        <h2 className=\"animated fadeIn\">{startPoint.crs}</h2>\n        <div className=\"graphicContainer\">\n          <ul>\n            <li className=\"animated fadeInDown\"></li>\n            <li className=\"animated fadeInDown\"></li>\n            <li className=\"animated fadeInDown\"></li>\n          </ul>\n          <img src={train} alt=\"\" className=\"animated fadeInDown\" />\n          <ul>\n            <li className=\"animated fadeInDown\"></li>\n            <li className=\"animated fadeInDown\"></li>\n            <li className=\"animated fadeInDown\"></li>\n          </ul>\n        </div>\n        <h2 className=\"animated fadeIn\">{endPoint.crs}</h2>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Times from \"./components/Times\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  state = {\n    startPoint: {\n      crs: \"EGH\",\n      location: \"Egham\"\n    },\n    endPoint: {\n      crs: \"WAT\",\n      location: \"London Waterloo\"\n    }\n  };\n  render() {\n    const { startPoint, endPoint } = this.state;\n    return (\n      <div className=\"App\">\n        <Header startPoint={startPoint} endPoint={endPoint} />\n        <Times startPoint={startPoint} endPoint={endPoint} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return <footer></footer>;\n  }\n}\n\nexport default Footer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}